{"mappings":"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","sources":["index.js"],"sourcesContent":["import { Transformer } from \"@parcel/plugin\";\nimport SourceMap from \"@parcel/source-map\";\nimport { relativeUrl } from \"@parcel/utils\";\nimport { compile, preprocess, walk } from \"svelte/compiler\";\nimport ThrowableDiagnostic from \"@parcel/diagnostic\";\nimport preprocessor from \"svelte-preprocess\";\nimport { createMakeHot } from \"svelte-hmr\";\n\nconst makeHot = createMakeHot({\n  walk,\n  meta: \"module\",\n  absoluteImports: false,\n  versionNonAbsoluteImports: false,\n});\n\nexport default new Transformer({\n  async loadConfig({ config, options, logger }) {\n    const svelteConfig = await config.getConfig([\n      \".svelterc\",\n      \".svelterc.json\",\n      \"svelte.config.js\",\n    ]);\n    if (!svelteConfig)\n      return {\n        compilerOptions: {\n          css: false,\n          dev: options.mode !== \"production\",\n        },\n      };\n    if (svelteConfig.filePath.endsWith(\".js\")) {\n      // TODO: Is there a better way of handling this warning? Probably just\n      // mention it in the documentation and silently invalidate.\n      logger.warn({\n        message:\n          \"WARNING: Using a JavaScript Svelte config file means losing \" +\n          \"out on caching features of Parcel. Use a .svelterc(.json) \" +\n          \"file whenever possible.\",\n      });\n      config.invalidateOnStartup();\n    }\n    return {\n      ...svelteConfig.contents,\n      compilerOptions: {\n        css: false,\n        ...svelteConfig.contents.compilerOptions,\n        dev: options.mode !== \"production\",\n      },\n    };\n  },\n\n  async transform({\n    asset,\n    config: { preprocess: preprocessConf, compilerOptions, hmrOptions },\n    options,\n    logger,\n  }) {\n    let source = await asset.getCode();\n    const filename = relativeUrl(options.projectRoot, asset.filePath);\n\n    // If the preprocessor config is never defined in the svelte config, attempt\n    // to import `svelte-preprocess`. If that is importable, use that to\n    // preprocess the file. Otherwise, do not run any preprocessors.\n    if (preprocessConf === undefined) {\n      logger.verbose({\n        message: \"No preprocess specified; using `svelte-preprocess`.\",\n      });\n      preprocessConf = preprocessor();\n    }\n\n    // Only preprocess if there is a config for it.\n    if (preprocessConf) {\n      logger.verbose({ message: \"Preprocessing svelte file.\" });\n      const processed = await catchDiag(\n        async () =>\n          await preprocess(source, preprocessConf, {\n            filename,\n          }),\n        source,\n      );\n      source = processed.code;\n    }\n\n    logger.verbose({ message: \"Compiling svelte file.\" });\n    const compiled = await catchDiag(\n      async () =>\n        await compile(source, {\n          ...compilerOptions,\n          filename,\n        }),\n      source,\n    );\n\n    if (options.hmrOptions) {\n      compiled.js.code = makeHot({\n        id: filename,\n        compiledCode: compiled.js.code,\n        hotOptions: hmrOptions,\n        compiled,\n        originalCode: source,\n        compileOptions: compilerOptions,\n      });\n    }\n\n    // Create the new assets from the compilation result.\n    const assets = [\n      {\n        type: \"js\",\n        content: compiled.js.code,\n        uniqueKey: `${asset.id}-js`,\n        map: extractSourceMaps(asset, compiled.js.map),\n      },\n    ];\n    if (compiled.css && compiled.css.code) {\n      assets.push({\n        type: \"css\",\n        content: compiled.css.code,\n        uniqueKey: `${asset.id}-css`,\n        map: extractSourceMaps(asset, compiled.css.map),\n      });\n    }\n\n    // Forward any warnings from the svelte compiler to the parcel diagnostics.\n    if (compiled.warnings.length > 0) {\n      for (const warning of compiled.warnings) {\n        logger.warn(convertDiag(warning));\n      }\n    }\n\n    return assets;\n  },\n});\n\nfunction extractSourceMaps(asset, sourceMap) {\n  if (!sourceMap) return;\n  sourceMap.sources = [asset.filePath];\n  const map = new SourceMap();\n  map.addVLQMap(sourceMap);\n  return map;\n}\n\nasync function catchDiag(fn, code) {\n  try {\n    return await fn();\n  } catch (e) {\n    throw new ThrowableDiagnostic({\n      diagnostic: convertDiag(e, code),\n    });\n  }\n}\n\nfunction convertDiag(svelteDiag, code) {\n  const codeFrame = {\n    filePath: svelteDiag.filename,\n    code,\n    codeHighlights: [\n      {\n        start: svelteDiag.start,\n        end: svelteDiag.end,\n      },\n    ],\n  };\n  return {\n    message: svelteDiag.message,\n    codeFrames: [codeFrame],\n  };\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}